[[plugins]]
repo = 'Shougo/unite.vim'
on_cmd = ['Unite']
hook_add = '''
	nnoremap [unite] :Unite
	nmap ,u [unite]
	" bookmark
	nnoremap <silent> ,bj :<C-u>Unite bookmark<CR>
	" カラースキーマ(プレビュー)
	nnoremap <silent> ,cs :<C-u>Unite colorscheme -auto-preview<CR>
	" Codic
	"nnoremap <silent> ,co :<C-u>Unite codic -direction=topleft<CR>
	" ESCキーで終了する
	autocmd FileType unite nmap <buffer> <ESC> <Plug>(unite_exit)
'''
hook_post_source = '''
	call unite#custom#profile('default', 'context', {
\		'start_insert': 1,
\		'direction': 'dynamicbottom',
\	})
	call unite#custom#default_action('directory', 'vimfiler')
'''

# Python3 に依存
[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = ['Denite', 'DeniteCursorWord']
hook_add = '''
	nnoremap [denite] :Denite
	nmap ,d [denite]
	" ディレクトリ一覧
	nnoremap <silent> ,dr :<C-u>Denite directory_rec<CR>
	" grep
	nnoremap <silent> ,gr :<C-u>Denite grep -auto-preview -buffer-name=denite-grep<CR>
	nnoremap <silent> ,gc :<C-u>DeniteCursorWord grep -auto-preview -buffer-name=denite-grep<CR>
	nnoremap <silent> ,rg :<C-u>Denite -resume -buffer-name=denite-grep<CR>
'''
hook_post_source = '''
	call denite#custom#option('default', 'direction', 'dynamicbottom')
	" 上下移動を<C-N>, <C-P>
	call denite#custom#map('normal', '<C-N>', '<denite:move_to_next_line>')
	call denite#custom#map('normal', '<C-P>', '<denite:move_to_previous_line>')
	call denite#custom#map('insert', '<C-N>', '<denite:move_to_next_line>')
	call denite#custom#map('insert', '<C-P>', '<denite:move_to_previous_line>')
	" タブオープンを<C-T>
	call denite#custom#map('insert', '<C-T>', '<denite:do_action:tabopen>')
	" For ripgrep
	" Note: It is slower than ag
	call denite#custom#var('file_rec', 'command', ['rg', '--files', '--glob', '!.git'])
	" 部分一致(スペースで複数可)
	call denite#custom#source('file_mru', 'matchers', ['matcher_substring'])
	" Ripgrep command on grep source
	call denite#custom#var('grep', 'command', ['rg'])
	call denite#custom#var('grep', 'default_opts', ['--vimgrep', '--no-heading'])
	call denite#custom#var('grep', 'recursive_opts', [])
	call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
	call denite#custom#var('grep', 'separator', ['--'])
	call denite#custom#var('grep', 'final_opts', [])
'''

[[plugins]]
repo = 'Shougo/vimfiler.vim'
on_cmd = ['VimFiler', 'VimFilerTab', 'VimFilerBufferDir', 'VimFilerCurrentDir']
hook_add = '''
	nnoremap [vimfiler] :VimFiler
	nmap ,f [vimfiler]
	" VimFiler(バッファディレクトリ)
	nnoremap <silent> [vimfiler]d :<C-u>VimFilerBufferDir<CR>
	" VimFiler(カレントディレクトリ)
	nnoremap <silent> [vimfiler]c :<C-u>VimFilerCurrentDir<CR>
'''
hook_source = '''
	let g:vimfiler_as_default_explorer = 1
'''
hook_post_source = '''
	call vimfiler#custom#profile('default', 'context', {
\		'auto_cd': 1,
\		'safe': 0,
\		'fnamewidth': 74,
\		'sort_type': 'Time',
\	})
'''

[[plugins]]
repo = 'junegunn/fzf'
build = './install --bin'
merged = '0'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
on_cmd = ['Files', 'GFiles', 'FileMRU', 'DirectoryMRU', 'Snippets', 'Buffers']
hook_add = '''
	" ファイル一覧(サブディレクトリも対象)
	nnoremap <silent> ,fr :<C-u>Files<CR>
	" ファイル一覧(Git)
	nnoremap <silent> ,fg :<C-u>GFiles<CR>
	" 最近使用したファイル一覧
	nnoremap <silent> ,fm :<C-u>FileMRU<CR>
	" 最近使用したディレクトリ一覧
	nnoremap <silent> ,dm :<C-u>DirectoryMRU<CR>
	" スニペット
	nnoremap <silent> ,sn :<C-u>Snippets<CR>
	" バッファ一覧
	nnoremap <silent> ,bl :<C-u>Buffers<CR>
'''
hook_source = '''
	let g:fzf_layout = { 'window': '-tabnew' }
	command! FileMRU :call fzf#run(fzf#wrap({
\		'source': 'tail -n +2 file',
\		'dir': '~/.cache/neomru',
\	}))
	command! DirectoryMRU :call fzf#run(fzf#wrap({
\		'source': 'tail -n +2 directory',
\		'sink': 'VimFiler',
\		'dir': '~/.cache/neomru',
\	}))
'''

[[plugins]]
repo = 'thinca/vim-quickrun.git'
on_path = '.*'
hook_source = '''
	let g:quickrun_config = get(g:, 'quickrun_config', {})
	let g:quickrun_config._ = {
\		'outputter/error/success': 'buffer',
\		'outputter/error/error': 'quickfix',
\		'outputter/quickfix/open_cmd': 'copen',
\		'runner': 'vimproc',
\		'runner/vimproc/updatetime': 60,
\		'hook/time/enable': 1,
\	}
	let g:quickrun_config.cpp = {
\		'command': 'g++',
\		'cmdopt' : '-std=c++14 -Wall',
\		'input'  : '=@0',
\		'runner' : 'system',
\	}
	let g:quickrun_config.cs  = {
\		'command'              : 'mcs',
\		'exec'                 : ['%c %o %s:p > /dev/null', 'mono %s:p:r.exe', 'rm %s:p:r.exe'],
\		'cmdopt'               : '-warn:4',
\		'quickfix/errorformat' : '%f\\(%l\\,%c\\):\ error\ CS%n:\ %m',
\	}
	let g:quickrun_config.python  = {
\		'command': 'python3.8',
\	}
'''

[[plugins]]
repo = 'SirVer/ultisnips'
depends = 'fzf.vim'
on_path = '.*'
hook_source = '''
	let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
	let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
	let g:SuperTabDefaultCompletionType = '<C-n>'

	let g:UltiSnipsExpandTrigger       = "<Tab>"
	let g:UltiSnipsJumpForwardTrigger  = "<Tab>"
	let g:UltiSnipsJumpBackwardTrigger = "<S-Tab>"

	"let g:UltiSnipsSnippetsDir = '~/.vim/UltiSnips'
	let g:UltiSnipsSnippetDirectories = [ $HOME . '/.vim/UltiSnips' ]
'''

[[plugins]]
repo = 'honza/vim-snippets'
depends = 'ultisnips'
on_path = '.*'

[[plugins]]
repo = 'tyru/eskk.vim'
on_i = 1
hook_source = '''
	let g:eskk#dictionary = {
\		'path': '~/.vim/dict/SKK-VIM-JISYO.txt',
\		'sorted': 0,
\		'encoding': 'utf-8',
\	}
	let g:eskk#large_dictionary = {
\		'path': '~/.vim/dict/skk-dict.txt',
\		'sorted': 1,
\		'encoding': 'cp932',
\	}
	let g:eskk#marker_henkan = '^'
	let g:eskk#marker_henkan_select = '^'
	let g:eskk#egg_like_newline = 1

	autocmd User eskk-initialize-pre call s:eskk_initial_pre()
	function! s:eskk_initial_pre() abort
		let t = eskk#table#new('rom_to_hira*', 'rom_to_hira')
		call t.add_map('(', '（')
		call t.add_map(')', '）')
		call t.add_map('~', '～')
		call t.add_map('zc', '©')
		call t.add_map('zr', '®')
		call t.add_map('tm', '™')
		call t.add_map('z ', '　')
		call eskk#register_mode_table('hira', t)
	endfunction
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
on_map = ['<Plug>(easymotion-']
hook_add = '''
	map s <Plug>(easymotion-s2)
'''
hook_source = '''
	" デフォルトのキーマッピングを無効に
	let g:EasyMotion_do_mapping = 0
	" 検索時、大文字小文字を区別しない
	let g:EasyMotion_smartcase = 1
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = ['<Plug>(EasyAlign)']
hook_add = '''
	nmap ga <Plug>(EasyAlign)
	xmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'jremmen/vim-ripgrep'
on_cmd = ['Rg']

[[plugins]]
repo = 'gregsexton/gitv'
on_cmd = ['Gitv']

[[plugins]]
repo = 'cohama/agit.vim'
on_cmd = ['Agit']

#[[plugins]]
#repo = 'koron/codic-vim'
#on_cmd = ['Codic']
#
#[[plugins]]
#repo = 'rhysd/unite-codic.vim'
#on_source = ['unite.vim']

# https://github.com/okwrtdsh/vim-codic
[[plugins]]
repo = 'okwrtdsh/vim-codic'
on_cmd = ['Codic', 'CodicCamel']

[[plugins]]
repo = 'haya14busa/vim-migemo'
if   = '! has("nvim")'
on_i = 1
hook_post_source = '''
	set migemo
	set migemodict=C:\bin\cmigemo\dict\utf-8\migemo-dict
'''

#[[plugins]]
#repo = 'Shougo/deoplete.nvim'
#on_i = 1
#hook_source = '''
#	let g:deoplete#enable_at_startup = 1
#'''

#[[plugins]]
#repo = 'hewes/unite-gtags'
#on_path = '.*'
#hook_source = '''
#	" cscope_maps.vim like
#	autocmd FileType h,c,cpp,php,javascript,css nnoremap <C-\>s :<C-u>Unite gtags/context -immediately<CR>
#	autocmd FileType h,c,cpp,php,javascript,css nnoremap <C-\>g :<C-u>Unite gtags/def -immediately<CR>
#	autocmd FileType h,c,cpp,php,javascript,css nnoremap <C-\>c :<C-u>Unite gtags/ref -auto-preview<CR>
#	autocmd FileType h,c,cpp,php,javascript,css nnoremap <C-\>e :<C-u>Unite gtags/grep -auto-preview<CR>
#'''

[[plugins]]
repo = 'vim-scripts/gtags.vim'
on_path = '.*'
hook_source = '''
	let g:Gtags_Auto_Map = 0
	let g:Gtags_OpenQuickfixWindow = 1
'''
hook_add = '''
	" cscope_maps.vim like
	" Show definetion of function cursor word on quickfix
	nnoremap <C-\>s :<C-u>exe("Gtags ".expand('<cword>'))<CR>
	" Show reference of cursor word on quickfix
	nnoremap <C-\>c :<C-u>exe("Gtags -r ".expand('<cword>'))<CR>
	" Show search on quickfix
	nnoremap <C-\>e :<C-u>Gtags -g 
'''

#[[plugins]]
#repo = 'Shougo/neosnippet'
#on_path = '.*'
#hook_add = '''
#	" Plugin key-mappings.
#	" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
#	imap <C-k> <Plug>(neosnippet_expand_or_jump)
#	smap <C-k> <Plug>(neosnippet_expand_or_jump)
#	xmap <C-k> <Plug>(neosnippet_expand_target)
#
#	" SuperTab like snippets behavior.
#	" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
#	imap <expr><TAB>
#\		pumvisible() ? "\<C-n>" :
#\		neosnippet#expandable_or_jumpable() ?
#\		"\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
#	smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
#\		"\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
#'''
#
#[[plugins]]
#repo = 'Shougo/neosnippet-snippets'
#depends = 'neosnippet'
#on_path = '.*'

#[[plugins]]
#repo = 'w0rp/ale'
#on_path = '.*'
#hook_source = '''
#	" 保存時のみ実行する
#	let g:ale_lint_on_text_changed = 0
#	" 表示に関する設定
#	let g:ale_sign_column_always = 1
#	let g:ale_sign_error = 'E'
#	let g:ale_sign_warning = 'W'
#	let g:ale_echo_msg_format = '[%linter%]%code: %%s'
#'''
#hook_post_source = '''
#	highlight link ALEErrorSign Tag
#	highlight link ALEWarningSign StorageClass
#	" Ctrl + kで次の指摘へ、Ctrl + jで前の指摘へ移動
#	nmap <silent> <C-k> <Plug>(ale_previous_wrap)
#	nmap <silent> <C-j> <Plug>(ale_next_wrap)
#'''

[[plugins]]
repo = 'Valloric/YouCompleteMe'
merged = 0
on_path = '.*'
hook_source = '''
	let g:ycm_global_ycm_extra_conf = '~/.config/.ycm_extra_conf.py'
	let g:ycm_auto_trigger = 1
	let g:ycm_autoclose_preview_window_after_insertion = 1
	let g:ycm_key_list_stop_completion = ['<C-l>']
	let g:ycm_rust_src_path = '/usr/src/rustc-1.36.0/src'
'''

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'rhysd/vim-clang-format'
depends = 'vim-operator-user'
on_path = '.*'
hook_source = '''
	let g:clang_format#detect_style_file = 1
	let g:clang_format#command = 'clang-format-6.0'
'''

[[plugins]]
repo = 'dhruvasagar/vim-table-mode.git'
on_cmd = ['TableModeToggle']

[[plugins]]
repo = 'kana/vim-altr'
on_cmd = ['A']
hook_source = '''
	" ヘッダファイルとソースファイルを切り替える
	command! A call altr#forward()
'''

[[plugins]]
repo = 'vim-scripts/DirDiff.vim'
on_cmd = ['DirDiff']
hook_source = '''
	" 行末のCRを取り除く
	let g:DirDiffAddArgs = "--strip-trailing-cr"
	" 除外するもの
	let g:DirDiffExcludes = "bin,*.o,a.out"
'''

[[plugins]]
repo = 'vim-scripts/copypath.vim'
on_cmd = ['CopyFileName', 'CopyPath']

[[plugins]]
repo = 'vim-scripts/BlockDiff'
on_cmd = ['BlockDiff1', 'BlockDiff2']

