[[plugins]]
repo = 'Shougo/unite.vim'
on_cmd = ['Unite']
hook_add = '''
	nnoremap [unite] :Unite
	nmap ,u [unite]
	" bookmark
	nnoremap <silent> ,bj :<C-u>Unite bookmark<CR>
	" カラースキーマ(プレビュー)
	nnoremap <silent> ,cs :<C-u>Unite colorscheme -auto-preview<CR>
	" ESCキーで終了する
	autocmd FileType unite nmap <buffer> <ESC> <Plug>(unite_exit)
'''
hook_post_source = '''
	call unite#custom#profile('default', 'context', {
\		'start_insert': 1,
\		'direction': 'dynamicbottom',
\	})
	call unite#custom#default_action('directory', 'vimfiler')
'''

[[plugins]]
repo = 'Shougo/vimfiler.vim'
on_cmd = ['VimFiler', 'VimFilerTab', 'VimFilerBufferDir', 'VimFilerCurrentDir']
hook_add = '''
	nnoremap [vimfiler] :VimFiler
	nmap ,f [vimfiler]
	" VimFiler(バッファディレクトリ)
	nnoremap <silent> [vimfiler]d :<C-u>VimFilerBufferDir<CR>
	" VimFiler(カレントディレクトリ)
	nnoremap <silent> [vimfiler]c :<C-u>VimFilerCurrentDir<CR>
'''
hook_source = '''
	let g:vimfiler_as_default_explorer = 1
'''
hook_post_source = '''
	call vimfiler#custom#profile('default', 'context', {
\		'auto_cd': 1,
\		'safe': 0,
\		'fnamewidth': 74,
\		'sort_type': 'Time',
\	})
'''

[[plugins]]
repo = 'lambdalisue/fern.vim'
on_cmd = ['Fern']
#hook_add = '''
#	nnoremap [fern] :Fern
#	nmap ,f [fern]
#	" バッファディレクトリ
#	nnoremap <silent> [fern]d :<C-u>Fern %:h<CR>
#	" カレントディレクトリ
#	nnoremap <silent> [fern]c :<C-u>Fern .<CR>
#'''

[[plugins]]
repo = 'lambdalisue/nerdfont.vim'
on_source = 'fern.vim'
hook_source = '''
	let g:fern#renderer = 'nerdfont'
'''

[[plugins]]
repo = 'lambdalisue/fern-renderer-nerdfont.vim'
on_source = 'fern.vim'

[[plugins]]
repo = 'lambdalisue/fern-bookmark.vim'
on_source = 'fern.vim'

[[plugins]]
repo = 'antoinemadec/FixCursorHold.nvim'
on_source = 'fern.vim'

[[plugins]]
repo = 'junegunn/fzf'
build = './install --bin'
merged = '0'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
on_cmd = ['Files', 'GFiles', 'Snippets', 'Buffers']
hook_add = '''
	" ファイル一覧(サブディレクトリも対象)
	nnoremap <silent> ,fr :<C-u>Files<CR>
	" ファイル一覧(Git)
	nnoremap <silent> ,fg :<C-u>GFiles<CR>
	" スニペット
	nnoremap <silent> ,sn :<C-u>Snippets<CR>
	" バッファ一覧
	nnoremap <silent> ,bl :<C-u>Buffers<CR>
'''
hook_source = '''
	let g:fzf_layout = { 'window': '-tabnew' }
'''

[[plugins]]
repo = 'pbogut/fzf-mru.vim'
depends = 'fzf'
on_cmd = ['FZFMru']
hook_add = '''
	" 最近使用したファイル一覧
	nnoremap <silent> ,fm :<C-u>FZFMru<CR>
'''
hook_source = '''
	let g:fzf_mru_relative = 0
'''

[[plugins]]
repo = 'thinca/vim-quickrun.git'
on_path = '.*'
hook_source = '''
	let g:quickrun_config = get(g:, 'quickrun_config', {})
	let g:quickrun_config._ = {
\		'outputter/error/success': 'buffer',
\		'outputter/error/error': 'quickfix',
\		'outputter/quickfix/open_cmd': 'copen',
\		'runner': 'vimproc',
\		'runner/vimproc/updatetime': 60,
\		'hook/time/enable': 1,
\	}
	let g:quickrun_config.cpp = {
\		'command': 'g++',
\		'cmdopt' : '-std=c++14 -Wall',
\		'input'  : '=@0',
\		'runner' : 'system',
\	}
	let g:quickrun_config.cs  = {
\		'command'              : 'mcs',
\		'exec'                 : ['%c %o %s:p > /dev/null', 'mono %s:p:r.exe', 'rm %s:p:r.exe'],
\		'cmdopt'               : '-warn:4',
\		'quickfix/errorformat' : '%f\\(%l\\,%c\\):\ error\ CS%n:\ %m',
\	}
	let g:quickrun_config.python  = {
\		'command': 'python3',
\	}
'''

[[plugins]]
repo = 'skywind3000/asyncrun.vim'
on_cmd = ['AsyncRun']
hook_add = '''
	nnoremap [asyncrun] :AsyncRun 
	nmap ,r [asyncrun]
	" Job終了時にquickfixを開く
	autocmd User AsyncRunStop call asyncrun#quickfix_toggle(8, 1)
'''
hook_source = '''
	let g:asyncrun_bell = 1
'''

[[plugins]]
repo = 'vim-skk/eskk.vim'
on_event = 'InsertEnter'
hook_source = '''
	let g:eskk#dictionary = {
\		'path': '~/.vim/dict/SKK-VIM-JISYO.txt',
\		'sorted': 0,
\		'encoding': 'utf-8',
\	}
	let g:eskk#large_dictionary = {
\		'path': '~/.vim/dict/SKK-JISYO.L',
\		'sorted': 1,
\		'encoding': 'euc-jp',
\	}
"	let g:eskk#marker_henkan = '^'
"	let g:eskk#marker_henkan_select = '^'
	let g:eskk#egg_like_newline = 1

	autocmd User eskk-initialize-pre call s:eskk_initial_pre()
	function! s:eskk_initial_pre() abort
		let t = eskk#table#new('rom_to_hira*', 'rom_to_hira')
		call t.add_map('(', '（')
		call t.add_map(')', '）')
		call t.add_map('~', '～')
		call t.add_map('zc', '©')
		call t.add_map('zr', '®')
		call t.add_map('tm', '™')
		call t.add_map('z ', '　')
		call eskk#register_mode_table('hira', t)
	endfunction
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
on_map = ['<Plug>(easymotion-']
hook_add = '''
	map s <Plug>(easymotion-s2)
'''
hook_source = '''
	" デフォルトのキーマッピングを無効に
	let g:EasyMotion_do_mapping = 0
	" 検索時、大文字小文字を区別しない
	let g:EasyMotion_smartcase = 1
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = ['<Plug>(EasyAlign)']
hook_add = '''
	nmap ga <Plug>(EasyAlign)
	xmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'jremmen/vim-ripgrep'
on_cmd = ['Rg']

[[plugins]]
repo = 'mhinz/vim-sayonara'
on_cmd = ['Sayonara']

[[plugins]]
repo = 'tpope/vim-fugitive'
on_path = '.*'

[[plugins]]
repo = 'buggo/gitv'
on_cmd = ['Gitv']

[[plugins]]
repo = 'cohama/agit.vim'
on_cmd = ['Agit']

# https://github.com/okwrtdsh/vim-codic
[[plugins]]
repo = 'okwrtdsh/vim-codic'
on_cmd = ['Codic', 'CodicCamel']

#[[plugins]]
#repo = 'rhysd/migemo-search.vim'
#on_path = '.*'
#hook_source = '''
#	let g:migemosearch_cmigemo = 'D:\bin\cmigemo\cmigemo.exe'
#	let g:migemosearch_migemodict = 'D:\bin\cmigemo\dict\cp932\migemo-dict'
#	let g:migemosearch_use_kaoriya_migemo = 1
#'''
#hook_add = '''
#	set incsearch
#'''

[[plugins]]
repo = 'vim-scripts/gtags.vim'
on_path = '.*'
hook_source = '''
	let g:Gtags_Auto_Map = 0
	let g:Gtags_OpenQuickfixWindow = 1
'''
hook_add = '''
	" cscope_maps.vim like
	" Show definetion of function cursor word on quickfix
	nnoremap <C-\>s :<C-u>exe("Gtags ".expand('<cword>'))<CR>
	" Show reference of cursor word on quickfix
	nnoremap <C-\>c :<C-u>exe("Gtags -r ".expand('<cword>'))<CR>
	" Show search on quickfix
	nnoremap <C-\>e :<C-u>Gtags -g 
'''

[[plugins]]
repo = 'w0rp/ale'
on_path = ['.js', '.php']
hook_source = '''
	" 保存時のみ実行する
	let g:ale_lint_on_text_changed = 0
	" 表示に関する設定
	let g:ale_sign_column_always = 1
	let g:ale_sign_error = "\uf06a"
	let g:ale_sign_warning = "\uf071"
	let g:ale_echo_msg_format = '[%linter%]%code: %%s'
'''
hook_post_source = '''
	highlight link ALEErrorSign Tag
	highlight link ALEWarningSign StorageClass
	" Ctrl + kで次の指摘へ、Ctrl + jで前の指摘へ移動
	nmap <silent> <C-k> <Plug>(ale_previous_wrap)
	nmap <silent> <C-j> <Plug>(ale_next_wrap)
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
if   = 'has("nvim")'
on_path = '.*'
merged = '0'
rev = 'release'
hook_post_source = '''
	" coc-translator
	nnoremap [translator] :CocCommand translator.
	nmap ,t [translator]
	nnoremap <silent> [translator]j :<C-u>CocCommand translator.popup<CR>
'''

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'rhysd/vim-clang-format'
depends = 'vim-operator-user'
on_path = '.*'
hook_source = '''
	let g:clang_format#detect_style_file = 1
	let g:clang_format#command = 'clang-format-6.0'
'''

[[plugins]]
repo = 'dhruvasagar/vim-table-mode.git'
on_cmd = ['TableModeToggle']

[[plugins]]
repo = 'kana/vim-altr'
on_cmd = ['A']
hook_source = '''
	" ヘッダファイルとソースファイルを切り替える
	command! A call altr#forward()
'''
hook_post_source = '''
	call altr#define('inc/%.h', 'src/%.cpp')
'''

[[plugins]]
"repo = 'vim-scripts/DirDiff.vim'
repo = 'will133/vim-dirdiff'
on_cmd = ['DirDiff']
hook_source = '''
	" 行末のCRを取り除く
	let g:DirDiffAddArgs = "--strip-trailing-cr"
	" 除外するもの
	let g:DirDiffExcludes = "bin,*.o,a.out"
'''

[[plugins]]
repo = 'vim-scripts/copypath.vim'
on_cmd = ['CopyFileName', 'CopyPath']

[[plugins]]
repo = 'vim-scripts/BlockDiff'
on_cmd = ['BlockDiff1', 'BlockDiff2']

