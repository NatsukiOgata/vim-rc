[[plugins]]
repo = 'Shougo/unite.vim'
on_cmd = ['Unite']
hook_add = '''
	nnoremap [unite] :Unite
	nmap ,u [unite]
	" バッファ一覧
	nnoremap <silent> ,bl :<C-u>Unite buffer<CR>
	" bookmark
	nnoremap <silent> ,jb :<C-u>Unite bookmark<CR>
	" 最近使用したディレクトリ一覧(ディレクトリ・ファイル)
	nnoremap <silent> ,dm :<C-u>Unite directory_mru file_mru<CR>
	" カラースキーマ(プレビュー)
	nnoremap <silent> ,cs :<C-u>Unite colorscheme -auto-preview<CR>
'''
hook_post_source = '''
	call unite#custom#profile('default', 'context', {
\		'start_insert': 1,
\		'direction': 'dynamicbottom',
\	})
	call unite#custom#default_action('directory', 'vimfiler')
'''

# Python3 に依存
[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = ['Denite', 'DeniteCursorWord']
hook_add = '''
	nnoremap [denite] :Denite
	nmap ,d [denite]
	" ディレクトリ一覧
	nnoremap <silent> ,dr :<C-u>Denite directory_rec<CR>
	" grep
	nnoremap <silent> ,gr :<C-u>Denite grep -auto-preview -buffer-name=denite-grep<CR>
	nnoremap <silent> ,gc :<C-u>DeniteCursorWord grep -auto-preview -buffer-name=denite-grep<CR>
	nnoremap <silent> ,rg :<C-u>Denite -resume -buffer-name=denite-grep<CR>
'''
hook_post_source = '''
	call denite#custom#option('default', 'direction', 'dynamicbottom')
	" 上下移動を<C-N>, <C-P>
	call denite#custom#map('normal', '<C-N>', '<denite:move_to_next_line>')
	call denite#custom#map('normal', '<C-P>', '<denite:move_to_previous_line>')
	call denite#custom#map('insert', '<C-N>', '<denite:move_to_next_line>')
	call denite#custom#map('insert', '<C-P>', '<denite:move_to_previous_line>')
	" タブオープンを<C-T>
	call denite#custom#map('insert', '<C-T>', '<denite:do_action:tabopen>')
	" For ripgrep
	" Note: It is slower than ag
	call denite#custom#var('file_rec', 'command', ['rg', '--files', '--glob', '!.git'])
	" 部分一致(スペースで複数可)
	call denite#custom#source('file_mru', 'matchers', ['matcher_substring'])
	" Ripgrep command on grep source
	call denite#custom#var('grep', 'command', ['rg'])
	call denite#custom#var('grep', 'default_opts', ['--vimgrep', '--no-heading'])
	call denite#custom#var('grep', 'recursive_opts', [])
	call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
	call denite#custom#var('grep', 'separator', ['--'])
	call denite#custom#var('grep', 'final_opts', [])
'''

[[plugins]]
repo = 'Shougo/vimfiler.vim'
on_cmd = ['VimFiler', 'VimFilerBufferDir', 'VimFilerCurrentDir']
hook_add = '''
	nnoremap [vimfiler] :VimFiler
	nmap ,f [vimfiler]
	" VimFiler(バッファディレクトリ)
	nnoremap <silent> [vimfiler]d :<C-u>VimFilerBufferDir<CR>
	" VimFiler(カレントディレクトリ)
	nnoremap <silent> [vimfiler]c :<C-u>VimFilerCurrentDir<CR>
'''
hook_source = '''
	let g:vimfiler_as_default_explorer = 1
'''
hook_post_source = '''
	call vimfiler#custom#profile('default', 'context', {
\		'auto_cd': 1,
\		'safe': 0,
\		'fnamewidth': 74,
\		'sort_type': 'Time',
\	})
'''

[[plugins]]
repo = 'junegunn/fzf'
build = './install --bin'
merged = '0'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
on_cmd = ['Files', 'History', 'GFiles']
hook_add = '''
	" ファイル一覧
	nnoremap <silent> ,fr :<C-u>Files<CR>
	" 最近使用したファイル一覧
	nnoremap <silent> ,fm :<C-u>History<CR>
	" ファイル一覧(Git)
	nnoremap <silent> ,gfr :<C-u>GFiles<CR>
'''

[[plugins]]
repo = 'tyru/eskk.vim'
on_i = 1
hook_source = '''
	let g:eskk#dictionary = {
\		'path': '~/.vim/dict/SKK-VIM-JISYO.txt',
\		'sorted': 0,
\		'encoding': 'utf-8',
\	}
	let g:eskk#large_dictionary = {
\		'path': $ALLUSERSPROFILE . '/skk/skki1_5/SKK-JISYO.L',
\		'sorted': 1,
\		'encoding': 'euc-jp',
\	}
	let g:eskk#egg_like_newline = 1
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
on_map = ['<Plug>(easymotion-']
hook_add = '''
	" <Space>f{char} to move to {char}
	map  <Space>f <Plug>(easymotion-bd-f)
	nmap <Space>f <Plug>(easymotion-overwin-f)
	" <Space>s{char}{char} to move to {char}{char}
	nmap <Space>s <Plug>(easymotion-overwin-f2)
	" Move to line
	map  <Space>L <Plug>(easymotion-bd-jk)
	nmap <Space>L <Plug>(easymotion-overwin-line)
	" Move to word
	map  <Space>w <Plug>(easymotion-bd-w)
	nmap <Space>w <Plug>(easymotion-overwin-w)
'''
hook_source = '''
	" デフォルトのキーマッピングを無効に
	let g:EasyMotion_do_mapping = 0
	" 検索時、大文字小文字を区別しない
	let g:EasyMotion_smartcase = 1
'''

[[plugins]]
repo = 'haya14busa/vim-migemo'
if   = '''! has('nvim')'''
on_i = 1
hook_post_source = '''
	set migemo
	set migemodict=C:\bin\cmigemo\dict\cp932\migemo-dict
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_i = 1
hook_source = '''
	let g:deoplete#enable_at_startup = 1
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = ['unite.vim', 'denite.nvim']

[[plugins]]
repo = 'hewes/unite-gtags'
on_path = '.*'
hook_source = '''
	" cscope_maps.vim like
	autocmd FileType h,c,cpp,php,javascript,css nnoremap <C-\>s :<C-u>Unite gtags/context -immediately<CR>
	autocmd FileType h,c,cpp,php,javascript,css nnoremap <C-\>g :<C-u>Unite gtags/def -immediately<CR>
	autocmd FileType h,c,cpp,php,javascript,css nnoremap <C-\>c :<C-u>Unite gtags/ref -auto-preview<CR>
	autocmd FileType h,c,cpp,php,javascript,css nnoremap <C-\>e :<C-u>Unite gtags/grep -auto-preview<CR>
'''

[[plugins]]
repo = 'w0rp/ale'
on_path = '.*'
hook_source = '''
	" 保存時のみ実行する
	let g:ale_lint_on_text_changed = 0
	" 表示に関する設定
	let g:ale_sign_error = '⛔'
	let g:ale_sign_warning = '⚠'
	let g:ale_echo_msg_format = '[%linter%]%code: %%s'
'''
hook_post_source = '''
	highlight link ALEErrorSign Tag
	highlight link ALEWarningSign StorageClass
	" Ctrl + kで次の指摘へ、Ctrl + jで前の指摘へ移動
	nmap <silent> <C-k> <Plug>(ale_previous_wrap)
	nmap <silent> <C-j> <Plug>(ale_next_wrap)
'''

[[plugins]]
repo = 'kana/vim-altr'
on_cmd = ['A']
hook_source = '''
	" ヘッダファイルとソースファイルを切り替える
	command! A call altr#forward()
'''

[[plugins]]
repo = 'vim-scripts/DirDiff.vim'
on_cmd = ['DirDiff']

[[plugins]]
repo = 'vim-scripts/copypath.vim'
on_cmd = ['CopyFileName', 'CopyPath']

[[plugins]]
repo = 'vim-scripts/BlockDiff'
on_cmd = ['BlockDiff1', 'BlockDiff2']
